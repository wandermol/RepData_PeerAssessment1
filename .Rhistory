x <- vector(integer(10L))
x <- vector(integer(10))
x <- vector(integer,10)
x <- vector(integer,lenght = 10)
x <- vector("integer",lenght = 10)
x <- vector("numeric",lenght = 10)
x <- vector("numeric", lenght = 10)
x
x <- vector("numeric", length = 10)
x <- vector("integer", length = 10)
x <- 0:4
x
class(x)
as.numeric(x)
class(x)
as.logical(x)
class(x)
x
as.character(x)
class(x)
class(as.character(x))
y <- -1
as.logical(y)
y
x <- c(1,2,3,4)
x
for(letter in x) {}
for(letter in x) { print(letter) }
add2 <- function(x,y) {
x + y
}
add2(8,4)
add2(8, 34)
vec <- c(1,10,23,45,4,74)
vec
vec >10
vec$>10
vec$1ß
vec$10
x[>10]
x[i>10]
x[vec>10]
f[vec>10]
x
?strptime
x^3
3^3
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1
if(x > 5) {
x <- 0
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
swirl()
swirl()
packageVersion("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
bye()
x
menu()
bye()
swirl()
bye()
swirl()7
swirl()
getwd()
ls()
x <- 9
ls ()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", "folder1")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
bye()
function(mean)
q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- c(1,2,3,4)
x <- makeVector()
x
x <- c(1,2,3,4)
y <- makeVector(x)
y
x <- c(1,2,3,4)
makeVector(x)
args(makeVector)
get <- function() x
get
class(get)
get <- function() x
get(1)
get() 1
get()
x
get <- function() x
get()
setmean <- function(mean) m <<- mean
setmean()
setmean(x)
m
mean
mean
mean(x)
prova <- function(mean) m <<- mean
prova
clear()
ll
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector(c(1, 2, 3))
cachemean(v)
cachemean(v)
cachemean(v)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector(c(1, 2, 3))
v
cachemean(v)
cachemean(v)
v
v[1]
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrix(1:4, 2, 2))
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrix(1:4, 2, 2))
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrix(1:4, 2, 2))
makeCacheMatrix(matrix(1:4, 2, 2))[1,1]
a <- matrix(1:4,2,2)
a
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrix(1:4, 2, 2))
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrix(1:4, 2, 2))
makeCacheMatrix(matrix(1:4, 2, 2))[1,1]
makeCacheMatrix(matrix(1:4, 2, 2))[1,2]
makeCacheMatrix(matrix(1:4, 2, 2))[2,1]
makeCacheMatrix(matrix(1:4, 2, 2))[2,2]
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
prova
prova["get", "inverse"]
prova["set", "inverse"]
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
a <- matrix(1:4,2,2)
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
prova
prova["get", "inverse"]()
prova["get", "inverse"]
class(prova["get", "inverse"])
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
pova
prova
class(prova["get", "inverse"])
prova["get", "inverse"]
get <- function() x
get()
get(3)
get()
x <- 3
get()
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
prova
class(prova["get", "inverse"])
prova["get", "inverse"]
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
prova["get", "inverse"]
as.function(prova["get", "inverse"])
prova["get", "inverse"]
print(prova["get", "inverse"])
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
prova
cacheSolve(prova)
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
prova$getinverse()
prova
prova$getinverse()
prova$getinverse
prova$getinverse()
prova$getinverse
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
cacheSolve(prova)
prova
a
a[1,1]
a <- matrix
a <- matrix(1:4,2,2, dimnames = list(c("row1","row2"), c("col1","col2"))
q
a <- matrix(1:4,2,2, dimnames = list(c("row1","row2"), c("col1","col2")))
a
a["row1", "col1"]
b <- list(c("row1","row2"), c("col1","col2"))
b
b[1]
b[[1]]
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
prova$[["set", "inverse"]]
prova[["set", "inverse"]]
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
prova[["get", "inverse"]]
a
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
cacheSolve(prova)
source('D:/Coursera/DS/GitHub/ProgrammingAssignment2/cachematrix.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
cacheSolve(prova)
source('D:/Coursera/DS/rev1.R')
prova <- makeCacheMatrix(matrix(1:4, 2, 2))
prova <- cacheMatrix(matrix(1:4, 2, 2))
source('D:/Coursera/DS/rev1.R')
## I very closely followed the functions described in the assigment.
## Basically I�ve only changed them from making  vector to matrix.
## cacheMatrix makes the matrix and gets inverse.
cacheMatrix<- function(x = matrix()) {
inve <- NULL                         #sets the inve to 0
set <- function(y) {
x <<- y                            #checks for x in higher enviroment
inve <<- NULL
}
get <- function() x
setinverse <- function(inverse) inve <<- inverse #solves matrix
getinverse <- function() inve
list(set = set, get = get,               #makes a list
setinverse = setinverse,
getinverse = getinverse)
}
m1<-matrix(rnorm(1:9), nrow=3, ncol=3) #makes a matrix so I dont have to type it while testing
## cacheSolve checks if inverse has been calculated, otherwise it solves the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inve <- x$getinverse()    #gets the inverse
if(!is.null(inve)) {      #if inverse is not avalible it prints the message and returns inve
message("getting cached matrix")
return(inve)
}
mmm <- x$get()          #gets matrix
inve <- solve(mmm, ...) #solves matrix
x$setinverse(inve)  # and caches the result in the object inve
inve
}
prova <- cacheMatrix(matrix(1:4, 2, 2))
cacheSolve(prova)
cacheSolve(prova)
install.packages("rjava")
install.packages("rJava")
source("htttp://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
sample(1:5)
sample(1:5)
seq(1:10, by=2)
seq(1, 10, by=2)
seq(1, 10, length=3)
seq(1, 10, length=4)
seq(0, 10, length=3)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
class(airquality$Month)
View(airquality)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
setwd("d:/Coursera/DS/GitHub/RepData_PeerAssessment1/")
unzip("activity.zip")
read.csv("activity.csv")
activity <- read.csv("activity.csv")
View(activity)
complete.cases(activity)
activity <- complete.cases(read.csv("activity.csv"))
activity <- read.csv("activity.csv")
activity <- activity[complete.cases(activity), ]
library(ggplot2)
qplot(steps, data = activity)
qplot(steps, date, data = activity)
qplot(date, steps, data = activity)
qplot(date, steps, data = activity, geom = hist)
qplot(date, steps, data = activity, geom = geom_histogram)
qplot(date, steps, data = activity, geom = "histogram")
qplot(steps, data = activity)
qplot(date, steps, data = activity, geom = "bar")
qplot(steps, data = activity, geom = "bar")
stepday <- aggregate(activity$steps, by = list(activity$date), FUN = sum)
View(stepday)
stepday <- setNames(aggregate(activity$steps, by = list(activity$date), FUN = sum), nm = c("date", "steps"))
qplot(steps, data = stepday)
qplot(steps, data = stepday, geom = "bar")
qplot(stepday, aes(date, steps))
ggplot(stepday, aes(date, steps))
ggplot(stepday, aes(date, steps)) + geom_bar()
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity")
qplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity")
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity")
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + scale_x_discrete(labels = abbreviate)
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity")
seq(0,40,5)
length((stepday))
length(stepday)
length(stepday$date)
dim(stepday)
dim(stepday)[1]
class(dim(stepday)[1])
seq(1, dim(stepday)[1], 5)
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + scale_x_continuous(breaks=seq(1, dim(stepday)[1], 5))
class(stepday$date)
ggplot(stepday, aes(as.character(date), steps)) + geom_bar(stat = "Identity") + scale_x_continuous(breaks=seq(1, dim(stepday)[1], 5))
ggplot(stepday, aes(as.character(date), steps)) + geom_bar(stat = "Identity")
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + scale_x_continuous(breaks=c(1,10,20,30)
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + scale_x_continuous(breaks=c(1,10,20,30))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme(axis.text.x = element_text(angle = 90)
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme(axis.text.x = element_text(angle = 90))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme_bw(axis.text.x = element_text(angle = 90))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme(axis.text.x = element_text(angle = 90)) + theme_bw()
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme_bw(axis.text.x = element_text(angle = 90))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + + theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme(axis.text.x = element_text(angle = 90))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggplot(stepday, aes(date, steps)) + geom_bar(stat = "Identity") + theme_bw() + theme(axis.text.x = element_text(angle = 90)) + abline(mean(stepday$steps))
meansteps <- mean(stepday$steps)
qplot(x = step, data = stepday)
qplot(x = step, data = stepday)
qplot(step, data = stepday)
qplot(step, date, data = stepday)
qplot(steps, data = stepday)
qplot(steps, data = stepday) + theme_light()
qplot(steps, data = stepday) + theme_bw()
qplot(steps, data = stepday) + theme_grey()
qplot(steps, data = stepday) + theme_dark()
qplot(steps, data = stepday) + theme_bw()
qplot(steps, data = stepday) + theme_bw()
dev.off()
median(stepday$steps)
mean(stepday$steps)
a <- mean(stepday$steps)
a
b <- median(stepday$steps)
b
stepint <- setNames(aggregate(activity$steps, by = list(activity$interval), FUN = mean),
nm = c("interval", "steps"))
activity <- read.csv("activity.csv")
activity <- activity[complete.cases(activity), ]
stepint <- setNames(aggregate(activity$steps, by = list(activity$interval), FUN = mean),
nm = c("interval", "steps"))
View(stepint)
View(stepint)
qplot(interval, steps, data = stepint, geom = "l"()
qplot(interval, steps, data = stepint, geom = "l")
qplot(interval, steps, data = stepint)
qplot(interval, steps, data = stepint) + geom_line()
qplot(interval, steps, data = stepint) + geom_line(size = 2)
qplot(interval, steps, data = stepint) + geom_line(size = 1.5)
qplot(interval, steps, data = stepint) + geom_line(size = 1)
qplot(interval, steps, data = stepint) + geom_line(size = 1) + theme_bw()
qplot(interval, steps, data = stepint) + geom_line() + theme_bw()
order(stepint["steps", ])
stepint[order(stepint[, "steps"]), ]
head(stepint[order(stepint[, "steps"]), ])
head(stepint[order(stepint[, -"steps"]), ])
head(stepint[order(stepint[, -2]), ])
class(stepint[,2])
head(stepint[order(stepint[, 2]), ])
head(stepint[order(stepint[, 2], decreasing = TRUE), ])
stepint[order(stepint[, 2], decreasing = TRUE), ][1, 1]
unzip("activity.zip")
activityraw <- read.csv("activity.csv")
activity <- activityraw[complete.cases(activityraw), ]
head(activityraw[complete.cases(activityraw), ])
head(activityraw[!complete.cases(activityraw), ])
tail(activityraw[!complete.cases(activityraw), ])
is.na(activityraw$date)
TRUE %in% is.na(activityraw$date)
FALSE %in% is.na(activityraw$date)
FALSE %in% is.na(activityraw$interval)
TRUE %in% is.na(activityraw$interval)
activityraw[complete.cases(activityraw), ]
activityraw[!complete.cases(activityraw), ]
dim[activityraw[!complete.cases(activityraw), ]]
dim(activityraw[!complete.cases(activityraw), ])
dim(activityraw[!complete.cases(activityraw), ])[1]
stepday <- setNames(aggregate(activity$steps, by = list(activity$date), FUN = sum),
nm = c("date", "steps"))
head(activityraw[!complete.cases(activityraw), ])
head(activityraw[!complete.cases(activityraw), ])[1,1]
head(activityraw[!complete.cases(activityraw), ])[1,1] +2
